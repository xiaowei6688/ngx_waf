(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{404:function(t,s,a){"use strict";a.r(s);var e=a(44),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[t._v("#")]),t._v(" 日志")]),t._v(" "),a("h2",{attrs:{id:"拦截日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截日志"}},[t._v("#")]),t._v(" 拦截日志")]),t._v(" "),a("p",[t._v("拦截日志日志存储在 error.log 中。拦截记录的日志等级为 ALERT。\n格式为 "),a("code",[t._v("ngx_waf: [规则类型][触发的具体规则]")]),t._v("。")]),t._v(" "),a("p",[t._v("您可以使用下列命令快速查看拦截日志。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /path/to/error.log "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" ngx_waf:\n")])])]),a("p",[t._v("下面是两个例子。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('2020/01/20 22:56:30 [alert] 6666#0: *30 ngx_waf: [BLACK-URL][(?i)(?:/\\.env$)], client: 192.168.1.1, server: example.com, request: "GET /v1/.env HTTP/1.1", host: "example.com", referrer: "http:/example.com/v1/.env"\n\n2020/01/20 22:58:40 [alert] 6667#0: *11 ngx_waf: [BLACK-POST][(?i)(?:select.+(?:from|limit))], client: 192.168.1.1, server: example.com, request: "POST /xmlrpc.php HTTP/1.1", host: "example.com", referrer: "https://example.com/"\n')])])]),a("h2",{attrs:{id:"调试日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调试日志"}},[t._v("#")]),t._v(" 调试日志")]),t._v(" "),a("p",[t._v("当您在 nginx 的配置文件中将错误日志的等级调整为 "),a("code",[t._v("debug")]),t._v(" 时，会在 error.log 中输出调试日志，\n用以排障。格式为 "),a("code",[t._v("ngx_waf_debug: 调试信息")]),t._v("。")]),t._v(" "),a("p",[t._v("您可以使用下列命令快速查看调试日志。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /path/to/error.log "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" ngx_waf_debug:\n")])])]),a("p",[t._v("下面是一段典型的调式日志，指示了一次 CC 防御检测的流程。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Start the CC inspection process.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: The module context has been obtained.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: The configuration of the module has been obtained.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Detection has begun.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Shared memory is locked.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Shared memory is unlocked.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: Detection is over.\n2021/02/21 20:35:33 [debug] 6666#0: *1 ngx_waf_debug: The CC detection process is fully completed.\n")])])]),a("h2",{attrs:{id:"自定义日志格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义日志格式"}},[t._v("#")]),t._v(" 自定义日志格式")]),t._v(" "),a("p",[t._v("nginx 允许自定义日志格式，并且一个 server 块可以同时写入多个日志文件，\n这就给我我们自定义日志格式的机会。本模块提供了几个"),a("RouterLink",{attrs:{to:"/zh-cn/advance/variable.html"}},[t._v("内置变量")]),t._v("，稍加利用即可实现。\n下面是一个例子。")],1),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("log_format")]),t._v("  main    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$remote_addr - $remote_user [$time_local] \"$request\" '")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$status $body_bytes_sent \"$http_referer\" '")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'"$http_user_agent" "$http_x_forwarded_for"\'')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("log_format")]),t._v(" yaml     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'- remote_addr: \"$remote_addr\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  remote_user: \"$remote_user\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  time_local: \"$time_local\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  request: \"$request\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  status: \"$status\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  body_bytes_sent: \"$body_bytes_sent\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  http_referer: \"$http_referer\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  http_user_agent: \"$http_user_agent\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  http_x_forwarded_for: \"$http_x_forwarded_for\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  waf_blocked: $waf_blocked\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  waf_spend: $waf_spend\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  waf_rule_type: \"$waf_rule_type\"\\n'")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  waf_rule_details: \"$waf_rule_details\"\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("access_log")]),t._v("  logs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("access"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log  main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("access_log")]),t._v("  logs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("access"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yml  yaml   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$waf_log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("access_log")]),t._v("  logs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("waf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yml     yaml   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$waf_blocking_log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("上述配置会有如下效果：")]),t._v(" "),a("ul",[a("li",[t._v("常规的访问日志写入 "),a("code",[t._v("logs/access.log")]),t._v(" 中。")]),t._v(" "),a("li",[t._v("YAML 格式的访问日志写入 "),a("code",[t._v("logs/access.yml")]),t._v(" 中。")]),t._v(" "),a("li",[t._v("YAML 格式的拦截日志写入 "),a("code",[t._v("logs/waf.yml")]),t._v(" 中。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("日志分析")]),t._v(" "),a("p",[t._v("你可以自定义日志格式，然后通过程序分析并制作统计图表。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("关于 YAML 格式")]),t._v(" "),a("p",[t._v("YAML 是一种可读性高的数据序列化格式，学习十分简单，只要能看懂 JSON，学习 YAML 也就一会儿的事情。\n可以自行搜索 YAML 的格式说明。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);